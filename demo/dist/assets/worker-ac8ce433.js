let t,l=0,b=null;function g(){return(b===null||b.byteLength===0)&&(b=new Uint8Array(t.memory.buffer)),b}const p=new TextEncoder("utf-8"),x=typeof p.encodeInto=="function"?function(n,e){return p.encodeInto(n,e)}:function(n,e){const o=p.encode(n);return e.set(o),{read:n.length,written:o.length}};function h(n,e,o){if(o===void 0){const s=p.encode(n),i=e(s.length);return g().subarray(i,i+s.length).set(s),l=s.length,i}let a=n.length,c=e(a);const _=g();let r=0;for(;r<a;r++){const s=n.charCodeAt(r);if(s>127)break;_[c+r]=s}if(r!==a){r!==0&&(n=n.slice(r)),c=o(c,a,a=r+n.length*3);const s=g().subarray(c+r,c+a),i=x(n,s);r+=i.written}return l=r,c}let m=null;function L(){return(m===null||m.byteLength===0)&&(m=new Uint32Array(t.memory.buffer)),m}function A(n,e){const o=e(n.length*4);return L().set(n,o/4),l=n.length,o}let y=null;function v(){return(y===null||y.byteLength===0)&&(y=new Int32Array(t.memory.buffer)),y}const I=new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0});I.decode();function R(n,e){return I.decode(g().subarray(n,n+e))}function T(n,e,o,a,c){try{const s=t.__wbindgen_add_to_stack_pointer(-16),i=h(n,t.__wbindgen_malloc,t.__wbindgen_realloc),d=l,u=h(e,t.__wbindgen_malloc,t.__wbindgen_realloc),w=l,f=A(o,t.__wbindgen_malloc),U=l,M=A(a,t.__wbindgen_malloc),W=l;t.scramble(s,i,d,u,w,f,U,M,W,c);var _=v()[s/4+0],r=v()[s/4+1];return R(_,r)}finally{t.__wbindgen_add_to_stack_pointer(16),t.__wbindgen_free(_,r)}}function k(n,e,o,a,c){try{const s=t.__wbindgen_add_to_stack_pointer(-16),i=h(n,t.__wbindgen_malloc,t.__wbindgen_realloc),d=l,u=h(e,t.__wbindgen_malloc,t.__wbindgen_realloc),w=l,f=A(o,t.__wbindgen_malloc),U=l,M=A(a,t.__wbindgen_malloc),W=l;t.solve(s,i,d,u,w,f,U,M,W,c);var _=v()[s/4+0],r=v()[s/4+1];return R(_,r)}finally{t.__wbindgen_add_to_stack_pointer(16),t.__wbindgen_free(_,r)}}async function E(n,e){if(typeof Response=="function"&&n instanceof Response){if(typeof WebAssembly.instantiateStreaming=="function")try{return await WebAssembly.instantiateStreaming(n,e)}catch(a){if(n.headers.get("Content-Type")!="application/wasm")console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",a);else throw a}const o=await n.arrayBuffer();return await WebAssembly.instantiate(o,e)}else{const o=await WebAssembly.instantiate(n,e);return o instanceof WebAssembly.Instance?{instance:o,module:n}:o}}function O(){const n={};return n.wbg={},n}function C(n,e){return t=n.exports,S.__wbindgen_wasm_module=e,y=null,m=null,b=null,t}async function S(n){typeof n>"u"&&(n=new URL("/solver/assets/solver_wasm_bg-2910c138.wasm",self.location));const e=O();(typeof n=="string"||typeof Request=="function"&&n instanceof Request||typeof URL=="function"&&n instanceof URL)&&(n=fetch(n));const{instance:o,module:a}=await E(await n,e);return C(o,a)}onmessage=function(n){n.data;const{method:e,alg:o,moves:a,onlyOrientation:c,disregard:_,maxSolutions:r}=n.data;S(new URL("/solver/assets/solver_wasm_bg-2910c138.wasm",self.location)).then(()=>{const{alg:s,moves:i,onlyOrientation:d,disregard:u,maxSolutions:w}=n.data;if(e==="scramble"){const f=T(s,i,new Uint32Array(d),new Uint32Array(u),w);postMessage(f)}else if(e==="solve"){const f=k(s,i,new Uint32Array(d),new Uint32Array(u),w);postMessage(f)}else console.error("Unknown method: "+n.method)})};
